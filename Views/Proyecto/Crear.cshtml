@*@model GestorTarea.Models.Usuarios*@
@model List<GestorTarea.Models.Proyectos>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Espacios de Trabajo</title>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    @Styles.Render("~/Content/Crear.css")
</head>
<body>
    <header class="header">
        <h1><i class="fas fa-cube"></i> TUS ESPACIOS DE TRABAJO</h1>
        <nav class="nav-items">
            <a href="#" class="nav-item active">
                <i class="fas fa-th-large"></i>
                Tableros
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-users"></i>
                Miembros
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-cog"></i>
                Configuración
            </a>
        </nav>
    </header>

    <div class="container">
        <div class="page-header">
            <h2 class="page-title">Espacios de trabajo</h2>
        </div>

        <div class="workspaces-grid" id="workspacesGrid">
            <!-- Botón para crear nuevo proyecto -->
            <div class="workspace-card create-new" id="btnOpenModal" style="cursor:pointer;">
                <div class="create-card-content">
                    <div class="create-icon"><i class="fas fa-plus"></i></div>
                    <div class="create-text">Crear un tablero nuevo</div>
                </div>
            </div>
        </div>

        <!-- Modal para crear proyecto -->
        <div id="createProjectModal" class="modal" style="display:none;">
            <div class="modal-content">
                <button class="close-btn" id="btnCloseModal" type="button">&times;</button>

                <div class="modal-header">
                    <h2 class="modal-title">Crear nuevo proyecto</h2>
                    <p class="modal-subtitle">Completa la información para comenzar tu nuevo espacio de trabajo</p>
                </div>

                <div class="modal-body">
                    <form id="createProjectForm">
                        <div class="form-group">
                            <label class="form-label"><i class="fas fa-heading"></i> Título del proyecto *</label>
                            <input type="text" id="projectTitle" name="title" class="form-input" required maxlength="100" />
                        </div>

                        <div class="form-group">
                            <label class="form-label"><i class="fas fa-align-left"></i> Descripción</label>
                            <textarea id="projectDescription" name="description" class="form-input form-textarea" maxlength="500"></textarea>
                        </div>

                        <div class="form-group">
                            <label class="form-label"><i class="fas fa-users"></i> Miembros</label>
                            <div class="radio-group">
                                <label class="radio-option selected" style="cursor:pointer;">
                                    <input type="radio" name="members" value="solo" checked />
                                    <div class="radio-option-content">
                                        <span class="radio-option-title">Solo yo</span>
                                        <span class="radio-option-desc">Proyecto personal</span>
                                    </div>
                                </label>
                                <label class="radio-option" style="cursor:pointer;">
                                    <input type="radio" name="members" value="conMiembros" />
                                    <div class="radio-option-content">
                                        <span class="radio-option-title">Con miembros</span>
                                        <span class="radio-option-desc">Proyecto colaborativo</span>
                                    </div>
                                </label>

                                <!-- Campo oculto para ingresar correos -->
                                <div class="form-group" id="miembrosEmailsContainer" style="display: none; margin-top:10px;">
                                    <label class="form-label">
                                        <i class="fas fa-envelope"></i> Correos de los miembros (separados por coma)
                                    </label>
                                    <input type="text" id="miembrosEmails" name="emails" class="form-input"
                                           placeholder="ej: juan@mail.com, maria@mail.com" />
                                    <small class="form-text text-muted">
                                        Escribe uno o más correos separados por comas.
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="modal-actions" style="margin-top:15px;">
                            <button type="button" class="btn btn-secondary" id="btnCancel">Cancelar</button>
                            <button type="submit" class="btn btn-primary" id="btnCreateProject">
                                <i class="fas fa-plus"></i> Crear Proyecto
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        let proyectos = [];

        // Función para renderizar proyectos en el grid
        function renderizarProyectos() {
            const grid = document.getElementById('workspacesGrid');
            const createButton = grid.querySelector('.create-new');
            grid.innerHTML = '';
            if (createButton) grid.appendChild(createButton);

            proyectos.forEach(proyecto => {
                const card = crearTarjetaProyecto(proyecto);
                grid.appendChild(card);
            });
        }

        // Crear tarjeta HTML para cada proyecto
        function crearTarjetaProyecto(proyecto) {
            const card = document.createElement('div');
            card.className = 'workspace-card project-card';
            card.setAttribute('data-project-id', proyecto.id);
            card.style.cursor = 'pointer';
        //
            let tareasHTML = '';
            if (proyecto.tareas && proyecto.tareas.length > 0) {
                tareasHTML = '<ul class="project-tasks">';
                proyecto.tareas.forEach(tarea => {
                    tareasHTML += `<li>${tarea.titulo} - ${tarea.estado}</li>`;
                });
                tareasHTML += '</ul>';
            } else {
                tareasHTML = '<p class="no-tasks">No tienes tareas asignadas</p>';
            }

            card.innerHTML = `
            <div class="project-header">
                <div><h3 class="project-title">${proyecto.titulo || proyecto.title}</h3></div>
                <i class="fas fa-star project-star"></i>
            </div>
            <p class="project-description">${proyecto.descripcion || proyecto.description || 'Sin descripción'}</p>
            <div class="project-footer">
                <div class="project-members">
                    <i class="fas fa-users"></i>
                    <span>${proyecto.memberCount} ${proyecto.memberCount === 1 ? 'miembro' : 'miembros'}</span>
                </div>
                <div class="project-type">
                    ${proyecto.members === 'solo' ? 'Personal' : 'Colaborativo'}
                </div>
            </div>
            <div class="project-tareas">
                <h4>Tareas asignadas:</h4>
                ${tareasHTML}
            </div>
        `;

            card.addEventListener('click', () => navegarAProyecto(proyecto.id));

            return card;
        }


        // Navegar a vista proyecto
        function navegarAProyecto(id) {
            if (!id) {
                alert('Error: ID de proyecto no válido');
                return;
            }
            window.location.href = `/Proyecto/IndexP/${id}`;
        }

        // Mostrar modal
        document.getElementById('btnOpenModal').addEventListener('click', () => {
            document.getElementById('createProjectModal').style.display = 'block';
        });

        // Cerrar modal
        document.getElementById('btnCloseModal').addEventListener('click', closeModal);
        document.getElementById('btnCancel').addEventListener('click', closeModal);

        function closeModal() {
            document.getElementById('createProjectModal').style.display = 'none';
            document.getElementById('createProjectForm').reset();
            document.querySelectorAll('.radio-option').forEach(opt => opt.classList.remove('selected'));
            document.querySelector('input[name="members"][value="solo"]').parentElement.classList.add('selected');
            // Ocultar campo emails
            document.getElementById('miembrosEmailsContainer').style.display = 'none';
        }

        // Cerrar modal clic fuera del contenido
        document.getElementById('createProjectModal').addEventListener('click', function (e) {
            if (e.target === this) closeModal();
        });

        // Cambiar estilo radio al seleccionar y mostrar campo correos si es colaborativo
        document.querySelectorAll('.radio-option').forEach(option => {
            option.addEventListener('click', function () {
                document.querySelectorAll('.radio-option').forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                this.querySelector('input[type="radio"]').checked = true;

                const valor = this.querySelector('input[type="radio"]').value;
                const container = document.getElementById('miembrosEmailsContainer');
                container.style.display = valor === 'conMiembros' ? 'block' : 'none';
            });
        });

        // Al cargar la página, obtener proyectos del servidor
        document.addEventListener('DOMContentLoaded', () => {
            fetch('/Proyecto/ObtenerProyectos')
                .then(res => res.json())
                .then(data => {
                    if (data.success && Array.isArray(data.proyectos)) {
                        proyectos = data.proyectos.map(p => ({
                            id: p.id,
                            titulo: p.titulo,
                            descripcion: p.descripcion,
                            members: p.members || 'solo',
                            memberCount: p.memberCount || (p.members === 'conMiembros' ? 2 : 1)
                        }));
                        renderizarProyectos();
                    } else {
                        alert('No se pudieron cargar los proyectos.');
                    }
                })
                .catch(() => {
                    alert('Error al cargar proyectos desde el servidor.');
                });
        });

        // Enviar formulario para crear proyecto
        document.getElementById('createProjectForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const titulo = document.getElementById('projectTitle').value.trim();
            const descripcion = document.getElementById('projectDescription').value.trim();
            const tipoMiembros = document.querySelector('input[name="members"]:checked').value;

            if (!titulo) {
                alert('Por favor, ingresa un título para el proyecto');
                return;
            }

            // Si es colaborativo, validar correos
            let emails = [];
            if (tipoMiembros === 'conMiembros') {
                const emailStr = document.getElementById('miembrosEmails').value.trim();
                if (emailStr.length === 0) {
                    alert('Por favor, ingresa al menos un correo para los miembros.');
                    return;
                }
                emails = emailStr
                    .split(',')
                    .map(e => e.trim())
                    .filter(e => e.length > 0);
            }

            const nuevoProyecto = {
                title: titulo,
                description: descripcion,
                members: tipoMiembros,
                emails: emails
            };

            fetch('/Proyecto/CrearProyecto', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(nuevoProyecto)
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        proyectos.push({
                            id: data.proyecto.id,
                            titulo: data.proyecto.nombre,
                            descripcion: data.proyecto.descripcion,
                            members: nuevoProyecto.members,
                            memberCount: tipoMiembros === 'conMiembros' ? emails.length + 1 : 1
                        });

                        renderizarProyectos();
                        alert('✅ Proyecto creado exitosamente: ' + titulo);
                        closeModal();
                    } else {
                        alert('Error al crear proyecto: ' + (data.message || 'Error desconocido'));
                    }
                })
                .catch(() => {
                    alert('Error de conexión con el servidor.');
                });
        });
    </script>
</body>
</html>
