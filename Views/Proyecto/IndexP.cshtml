@model GestorTarea.Models.Proyectos

@{
    ViewBag.Title = "Detalle del Proyecto";
    string nombreProyecto = ViewBag.GestorTarea as string;
}

<a href="@Url.Action("Crear", "Proyecto")" class="btn btn-outline-secondary me-2">
    <i class="fas fa-arrow-left"></i> Volver a mis proyectos
</a>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h2 class="text-primary">@Model.Nombre</h2>
        <p>@Model.Descripcion</p>
        <small class="text-muted">
            <i class="fas fa-user"></i> Creado por: @ViewBag.NombreCreador
            <span class="ms-3"><i class="fas fa-calendar"></i> @Model.FechaInicio.ToString("dd/MM/yyyy")</span>
        </small>
    </div>
    @if (ViewBag.PuedeEliminar != null && (bool)ViewBag.PuedeEliminar)
    {
        <button class="btn btn-danger" onclick="confirmarEliminarProyecto(@Model.IdProyecto)">
            <i class="fas fa-trash"></i> Eliminar Proyecto
        </button>
    }
</div>

@Styles.Render("~/Content/IndexP.css")
<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2 class="text-primary">Mi Proyecto</h2>
            <button id="btnNuevaLista" class="btn btn-success">
                <i class="fas fa-plus"></i> Nueva Lista de Tareas
            </button>
        </div>
    </div>

    <div id="contenedorListas" class="listas-container d-flex overflow-auto">
        <!-- Las listas se cargarán aquí -->
    </div>
</div>

<!-- Modal para crear nueva lista -->
<div class="modal fade" id="modalNuevaLista" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nueva Lista de Tareas</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="nombreLista" class="form-label">Nombre de la Lista</label>
                    <input type="text" class="form-control" id="nombreLista" placeholder="Ej: Por hacer, En progreso, Completado">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnCrearLista">Crear Lista</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear/editar tarea -->
<div class="modal fade" id="modalTarea" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tituloModalTarea">Nueva Tarea</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="mb-3">
                            <label for="tituloTarea" class="form-label fw-bold">Título</label>
                            <input type="text" class="form-control" id="tituloTarea" placeholder="Ingresa el título de la tarea">
                        </div>
                        <div class="mb-3">
                            <label for="descripcionTarea" class="form-label fw-bold">Descripción</label>
                            <textarea class="form-control" id="descripcionTarea" rows="4" placeholder="Describe los detalles de la tarea..."></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Lista de Verificación</label>
                            <div id="listaVerificacion"></div>
                            <button type="button" class="btn btn-sm btn-outline-primary" id="btnAgregarItem">
                                <i class="fas fa-plus"></i> Agregar elemento
                            </button>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="prioridadTarea" class="form-label fw-bold">Prioridad</label>
                            <select class="form-select" id="prioridadTarea">
                                <option value="baja">🟢 Baja</option>
                                <option value="media" selected>🟡 Media</option>
                                <option value="alta">🔴 Alta</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="fechaVencimiento" class="form-label fw-bold">Fecha de Vencimiento</label>
                            <input type="date" class="form-control" id="fechaVencimiento">
                        </div>
                        <div class="mb-3">
                            <label for="estadoTarea" class="form-label fw-bold">Estado</label>
                            <select class="form-select" id="estadoTarea">
                                <option value="pendiente">Pendiente</option>
                                <option value="en-progreso">En Progreso</option>
                                <option value="completado">Completado</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Etiquetas</label>
                            <div id="etiquetas" class="mb-2"></div>
                            <div class="d-flex flex-wrap gap-1">
                                <span class="badge bg-primary etiqueta-disponible" data-etiqueta="frontend">Frontend</span>
                                <span class="badge bg-success etiqueta-disponible" data-etiqueta="backend">Backend</span>
                                <span class="badge bg-warning etiqueta-disponible" data-etiqueta="design">Diseño</span>
                                <span class="badge bg-info etiqueta-disponible" data-etiqueta="testing">Testing</span>
                                <span class="badge bg-secondary etiqueta-disponible" data-etiqueta="docs">Documentación</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="progresoTarea" class="form-label fw-bold">Progreso</label>
                            <input type="range" class="form-range" id="progresoTarea" min="0" max="100" value="0">
                            <div class="d-flex justify-content-between">
                                <small>0%</small>
                                <small id="valorProgreso">0%</small>
                                <small>100%</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="btnEliminarTarea" style="display: none;">
                    <i class="fas fa-trash"></i> Eliminar
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnGuardarTarea">Guardar Tarea</button>
            </div>
        </div>
    </div>
</div>

<script>
    let contadorListas = 0;
    let contadorTareas = 0;
    let tareaActual = null;
    const idProyecto = @Model.IdProyecto;
    const tareasExistentes = []; // Para almacenar tareas del servidor

    // Inicialización
    document.addEventListener('DOMContentLoaded', function () {
        inicializarEventos();
        cargarTareasExistentes();
        crearListasIniciales();
    });

    function inicializarEventos() {
        document.getElementById('btnNuevaLista').addEventListener('click', function () {
            const modal = new bootstrap.Modal(document.getElementById('modalNuevaLista'));
            modal.show();
        });

        document.getElementById('btnCrearLista').addEventListener('click', crearNuevaLista);
        document.getElementById('btnGuardarTarea').addEventListener('click', guardarTarea);
        document.getElementById('btnEliminarTarea').addEventListener('click', eliminarTarea);
        document.getElementById('btnAgregarItem').addEventListener('click', agregarItemVerificacion);

        document.getElementById('progresoTarea').addEventListener('input', function () {
            document.getElementById('valorProgreso').textContent = this.value + '%';
        });

        document.querySelectorAll('.etiqueta-disponible').forEach(etiqueta => {
            etiqueta.addEventListener('click', toggleEtiqueta);
        });

        document.getElementById('modalTarea').addEventListener('hidden.bs.modal', limpiarModalTarea);
    }

    //Cargar tareas usando la API correcta
    function cargarTareasExistentes() {
        const token = localStorage.getItem('token');
        //
        $.ajax({
            url: `/Proyecto/ObtenerTareasPorProyecto?idProyecto=${idProyecto}`,
            method: 'GET',
            success: function (response) {
                if (response.success) {
                    tareasExistentes.length = 0;
                    tareasExistentes.push(...response.tareas);
                    limpiarYRecargarTareas();
                } else {
                    alert(response.message);
                }
            },
            error: function () {
                alert('Error al cargar tareas');
            }
        });

    }

    function crearListasIniciales() {
        // Crear listas por defecto con las tareas existentes
        setTimeout(() => {
            crearListaConNombre('Por Hacer');
            crearListaConNombre('En Progreso');
            crearListaConNombre('Completado');

            // Después de crear las listas, distribuir las tareas existentes
            setTimeout(() => {
                distribuirTareasExistentes();
            }, 500);
        }, 300);
    }

    function crearListaConNombre(nombreLista) {
        contadorListas++;
        const listaId = `lista-${contadorListas}`;

        const listaHTML = `
            <div class="lista-tareas" id="${listaId}">
                <div class="lista-header">
                    <h5 class="lista-titulo">${nombreLista}</h5>
                    <button class="btn btn-sm btn-link text-muted p-0" onclick="eliminarLista('${listaId}')" title="Eliminar lista">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                </div>
                <div class="tareas-contenedor" data-lista="${listaId}">
                    <!-- Las tareas se agregarán aquí -->
                </div>
                <button class="btn-agregar-tarea" onclick="abrirModalTarea('${listaId}')">
                    <i class="fas fa-plus"></i> Añade una tarjeta
                </button>
            </div>
        `;

        document.getElementById('contenedorListas').insertAdjacentHTML('beforeend', listaHTML);
    }

    //  los campos correctos de la API
    function distribuirTareasExistentes() {
        tareasExistentes.forEach(tarea => {
            let listaDestino = 'lista-1'; // Por defecto "Por Hacer"

            //ampo Estado del modelo Tareas
            if (tarea.Estado === 'en-progreso' || tarea.Estado === 'En Progreso') {
                listaDestino = 'lista-2'; // "En Progreso"
            } else if (tarea.Estado === 'completado' || tarea.Estado === 'Completado') {
                listaDestino = 'lista-3'; // "Completado"
            }

            mostrarTareaEnLista(listaDestino, tarea);
        });
    }

    // Usar campos correctos de la respuesta API
    function mostrarTareaEnLista(listaId, tarea) {
        const tareaId = `tarea-db-${tarea.IdTarea}`; // ✅ Usar IdTarea

        // El resto del código de visualización permanece igual
        const fechaBadge = ''; // Simplificar por ahora

        const badgeComentarios = `<span class="badge-icon badge-comentarios">
            <span class="icon-comment"></span> 0
        </span>`;

        const badgeChecklist = '';

        // ✅ Mostrar nombre del usuario asignado
        const avatarHTML = `<div class="avatar-assignee" title="${tarea.NombreUsuario || 'Sin asignar'}">
            ${obtenerIniciales(tarea.NombreUsuario)}
        </div>`;

        const tareaHTML = `
            <div class="tarea-card" id="${tareaId}" onclick="editarTareaExistente(${tarea.IdTarea}, '${listaId}')">
                <div class="tarea-titulo">${tarea.Titulo}</div>
                <div class="tarea-descripcion">${tarea.Descripcion || ''}</div>
                <div class="tarea-footer">
                    <div class="tarea-icons">
                        ${fechaBadge}
                        ${badgeComentarios}
                        ${badgeChecklist}
                    </div>
                    ${avatarHTML}
                </div>
            </div>
        `;

        const contenedor = document.querySelector(`[data-lista="${listaId}"]`);
        if (contenedor) {
            contenedor.insertAdjacentHTML('beforeend', tareaHTML);
        }
    }

    function obtenerIniciales(nombreUsuario) {
        if (!nombreUsuario) return '??';
        const palabras = nombreUsuario.split(' ');
        if (palabras.length >= 2) {
            return (palabras[0][0] + palabras[1][0]).toUpperCase();
        }
        return nombreUsuario.substring(0, 2).toUpperCase();
    }

    function editarTareaExistente(tareaId, listaId) {
        const tarea = tareasExistentes.find(t => t.IdTarea === tareaId); // Usar IdTarea
        if (tarea) {
            //Cargar datos usando campos correctos
            document.getElementById('tituloTarea').value = tarea.Titulo;
            document.getElementById('descripcionTarea').value = tarea.Descripcion || '';
            document.getElementById('estadoTarea').value = tarea.Estado || 'pendiente';
            //  
            document.getElementById('tituloModalTarea').textContent = 'Editar Tarea';
            document.getElementById('btnEliminarTarea').style.display = 'inline-block';

            tareaActual = {
                listaId: listaId,
                tareaId: `tarea-db-${tareaId}`,
                tareaDbId: tareaId,
                esExistente: true
            };

            const modal = new bootstrap.Modal(document.getElementById('modalTarea'));
            modal.show();
        }
    }
    //
    function crearNuevaLista() {
        const nombreLista = document.getElementById('nombreLista').value.trim();

        if (!nombreLista) {
            alert('Por favor ingresa un nombre para la lista');
            return;
        }

        crearListaConNombre(nombreLista);

        bootstrap.Modal.getInstance(document.getElementById('modalNuevaLista')).hide();
        document.getElementById('nombreLista').value = '';
    }

    function eliminarLista(listaId) {
        if (confirm('¿Estás seguro de que quieres eliminar esta lista y todas sus tareas?')) {
            document.getElementById(listaId).remove();
        }
    }

    function abrirModalTarea(listaId, tareaId = null) {
        const modal = new bootstrap.Modal(document.getElementById('modalTarea'));

        if (tareaId) {
            cargarDatosTarea(tareaId);
            document.getElementById('tituloModalTarea').textContent = 'Editar Tarea';
            document.getElementById('btnEliminarTarea').style.display = 'inline-block';
            tareaActual = { listaId, tareaId, esExistente: false };
        } else {
            document.getElementById('tituloModalTarea').textContent = 'Nueva Tarea';
            document.getElementById('btnEliminarTarea').style.display = 'none';
            tareaActual = { listaId, tareaId: null, esExistente: false };
        }

        modal.show();
    }

    function cargarDatosTarea(tareaId) {
        const tareaElement = document.getElementById(tareaId);
        const titulo = tareaElement.querySelector('.tarea-titulo').textContent;
        document.getElementById('tituloTarea').value = titulo;
    }

    //  Usar API de tareas para crear
    function guardarTarea() {
        const titulo = document.getElementById('tituloTarea').value.trim();
        const descripcion = document.getElementById('descripcionTarea').value.trim();
        const estado = document.getElementById('estadoTarea').value;

        if (!titulo) {
            alert('Por favor ingresa un título para la tarea');
            return;
        }

        if (tareaActual.esExistente) {
            // Actualizar tarea existente (implementar después)
            alert('Función de actualización pendiente de implementar');
            bootstrap.Modal.getInstance(document.getElementById('modalTarea')).hide();
        } else {
            //rear nueva tarea usando la API correcta
            const token = localStorage.getItem('token');

            $.ajax({
                url: '/api/tareas/crear', // ✅ Usar endpoint correcto
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({
                    IdProyecto: idProyecto, // ✅ Enviar IdProyecto
                    Titulo: titulo,
                    Descripcion: descripcion,
                    Estado: estado
                }),
                success: function (response) {
                    console.log('Tarea creada:', response);
                    // Recargar tareas para que todos los usuarios las vean
                    cargarTareasExistentes();

                    // Limpiar listas y recargar
                    setTimeout(() => {
                        limpiarYRecargarTareas();
                    }, 500);

                    bootstrap.Modal.getInstance(document.getElementById('modalTarea')).hide();
                    alert('Tarea creada correctamente');
                },
                error: function (xhr) {
                    console.error('Error al crear tarea:', xhr.responseText);
                    alert('Error al guardar la tarea: ' + (xhr.responseJSON?.message || 'Error desconocido'));
                }
            });
        }
    }

    // Limpiar y recargar todas las tareas
    function limpiarYRecargarTareas() {
        // Limpiar todas las listas
        document.querySelectorAll('.tareas-contenedor').forEach(contenedor => {
            contenedor.innerHTML = '';
        });

        // Redistribuir tareas
        setTimeout(() => {
            distribuirTareasExistentes();
        }, 200);
    }

    // Recargar tareas periódicamente (opcional)
    function iniciarActualizacionPeriodica() {
        setInterval(() => {
            cargarTareasExistentes();
            setTimeout(() => {
                limpiarYRecargarTareas();
            }, 500);
        }, 30000); // Recargar cada 30 segundos
    }

    function eliminarTarea() {
        if (confirm('¿Estás seguro de que quieres eliminar esta tarea?')) {
            if (tareaActual.esExistente) {
                // TODO: Implementar eliminación en la API
                alert('Función de eliminación pendiente de implementar');
            } else {
                // Eliminar tarea local
                document.getElementById(tareaActual.tareaId).remove();
                bootstrap.Modal.getInstance(document.getElementById('modalTarea')).hide();
            }
        }
    }

    function agregarItemVerificacion() {
        const contenedor = document.getElementById('listaVerificacion');
        const itemId = `item-${Date.now()}`;

        const itemHTML = `
            <div class="item-verificacion" id="${itemId}">
                <input type="checkbox">
                <input type="text" placeholder="Nuevo elemento...">
                <button type="button" class="btn-eliminar-item" onclick="document.getElementById('${itemId}').remove()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        contenedor.insertAdjacentHTML('beforeend', itemHTML);
    }

    function toggleEtiqueta(event) {
        event.target.classList.toggle('etiqueta-seleccionada');
    }

    function limpiarModalTarea() {
        document.getElementById('tituloTarea').value = '';
        document.getElementById('descripcionTarea').value = '';
        document.getElementById('prioridadTarea').value = 'media';
        document.getElementById('fechaVencimiento').value = '';
        document.getElementById('progresoTarea').value = '0';
        document.getElementById('valorProgreso').textContent = '0%';
        document.getElementById('estadoTarea').value = 'pendiente';
        document.getElementById('listaVerificacion').innerHTML = '';

        document.querySelectorAll('.etiqueta-seleccionada').forEach(etiqueta => {
            etiqueta.classList.remove('etiqueta-seleccionada');
        });

        tareaActual = null;
    }

    function formatearFecha(fecha) {
        const date = new Date(fecha);
        const mes = date.toLocaleDateString('es-ES', { month: 'short' });
        const dia = date.getDate();
        return `${dia} ${mes}`;
    }

    // Función para eliminar proyecto (solo visible para creador y admin)
    function confirmarEliminarProyecto(idProyecto) {
        if (confirm('¿Estás seguro de que quieres eliminar este proyecto? Esta acción no se puede deshacer.')) {
            $.ajax({
                url: '@Url.Action("EliminarProyecto", "Proyecto")',
                method: 'POST',
                data: { id: idProyecto },
                success: function(response) {
                    if (response.success) {
                        alert('Proyecto eliminado correctamente');
                        window.location.href = '@Url.Action("Crear", "Proyecto")';
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function() {
                    alert('Error al eliminar el proyecto');
                }
            });
        }
    }

    // ✅ Iniciar actualización periódica (opcional, descomenta si la quieres)
    // setTimeout(iniciarActualizacionPeriodica, 5000);
</script>
